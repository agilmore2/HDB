/*This is res_data using a cursor.                                  */
/*Rick Clayton  rclayton@ucsun3.uc.usbr.gov                         */
/*August 19, 1999                                                   */

/*This program accesses the UCHDB Oracle database for reservoir data.  The 
  program takes 2 argments, the reservoir site_id, and the number of days prior
  to today that the user would like to retrieve data for.  The program is 
  divided into 4 main parts.*/ 

/*PART 1  INITIALIZATION AND SETUP*/

/*  stdlib.h added by M. Bogner, Sutron Corporation to make program work for move to Linux  */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "dbutils.h"
#include "utils.h"
#include "defines.h"
#include "typedefs.h"

main ( int argc, char** argv )
{
  
  EXEC SQL INCLUDE SQLCA;
  
  EXEC SQL BEGIN DECLARE SECTION;

  SQL_DATE      thisday,firstday;
  ID	        site_id;
  short         value_null_indicator;
  float         value1,value2,value3,value4;
  VARCHAR	site_name[65];
  char          dater_base[12],dater1[12],dater2[12],dater3[12],dater4[12];
  
  EXEC SQL END DECLARE SECTION;
  
  char		*dbName,date_out_base[1000][20],date_out1[1000][20],date_out2[1000][20],date_out3[1000][20],date_out4[1000][20];
  char          final1c[1000][10],final2c[1000][10],final3c[1000][10],final4c[1000][10];
  int           num_days,result,count_base,count1,count2,count3,count4,i,j,test_a,test_b;
  float         vals1[1000],vals2[1000],vals3[1000],vals4[1000],final1[1000],final2[1000],final3[1000],final4[1000];
  short         val_null_base[1000],val_null1[1000],val_null2[1000],val_null3[1000],val_null4[1000];
  EXEC SQL WHENEVER SQLERROR GOTO errrpt;
  
  if (argc != 3)
    {
      printf("\nusage: res_data reservoir_site_id number_of_days\n");
      exit(2);
    }
  
  site_id = atoi(argv[1]);
  num_days = atoi(argv[2]);
  
  
  /* set the name of the database */
  
  dbName = NULL; 
  dbName = getenv("HDB_LOCAL");
  
  if (dbName == NULL)
    {
      PrintError("Environment variable HDB_LOCAL not set...\n");
      return(ERROR);
    }
  
  
  if  ((result = SqlConnect (dbName, "app_user", dbName)) == ERROR)
    exit (ERROR);
  
  fprintf(stdout, "Connected to ORACLE.\n");
  
  
  /* get todays date and places the value as an character string into 'today'*/
  /* specify 'today' gives date without time */
  /* specify 'now' gives date with time */
  
  if ((result = SqlGetDate (thisday)) == ERROR)
    exit(ERROR);
  
  /* 'thisday' and 'firstday' become the first and last date that will*/
  /* be queried for */


  SqlDateMath(SUBTRACTION,thisday,firstday,num_days,"dd");
    
  /*Gets the site_name and prints a header for the printout*/  
  
  EXEC SQL SELECT SITE_NAME
    INTO :site_name:value_null_indicator
      FROM HDB_SITE
	WHERE SITE_ID = :site_id;
  if ((sqlca.sqlcode > 0) || (value_null_indicator == -1))
    {		
      printf("Error retrieving site id %d\n",site_id);
      exit(2);
    }
  else
    {
      printf("\n%*s%.*s\n",(80-site_name.len)/2-1," ",site_name.len,site_name.arr);
      printf("\n         Date        Elevation      Content       Inflow      Release\n");
      printf("                       (feet)        (AF)          (cfs)        (cfs)\n\n");
      
    }
  EXEC SQL COMMIT;


  /*PART 2 RETRIEVE DATA */

  /*First we initialize the cursers, then we activate the cursors.  Finally
    we retrieve the data with the fetch command.  The first cursor populates
    the variable array date_out_base[] with all possible dates that occur in
    the database between 'firstday' and 'thisday'  The length of the array is
    stored in the variable count_base.  Each of the next 4 cursors
    populate two varable arrays date_out#[] and vals#[]  where #={1,2,3,4}.
    the length of each set of variable arrays is stored in the variables
    count#.  In the event that data could be missing in the data base for
    for any of the queries, the length of the variable arrays may be different
    from the length of date_out_base[] which means that realignment of the 
    data and dates must be done to indicate the missing data. */
  
  EXEC SQL DECLARE BASE CURSOR FOR
    SELECT DISTINCT START_DATE_TIME
      FROM R_DAY 
	WHERE START_DATE_TIME BETWEEN to_date(:firstday, 'dd-mon-yyyy hh24:mi:ss') AND to_date(:thisday, 'dd-mon-yyyy hh24:mi:ss');
  

  
  EXEC SQL DECLARE AA CURSOR FOR
    SELECT A.START_DATE_TIME, A.VALUE
      FROM R_DAY A, HDB_SITE_DATATYPE B
	WHERE B.SITE_ID = :site_id
	  AND B.DATATYPE_ID = 49
	    AND A.SITE_DATATYPE_ID = B.SITE_DATATYPE_ID
	      AND START_DATE_TIME BETWEEN to_date(:firstday, 'dd-mon-yyyy hh24:mi:ss') AND to_date(:thisday, 'dd-mon-yyyy hh24:mi:ss');
  
  EXEC SQL DECLARE BB CURSOR FOR
    SELECT A.START_DATE_TIME, A.VALUE
      FROM R_DAY A, HDB_SITE_DATATYPE B
	WHERE B.SITE_ID = :site_id
	  AND B.DATATYPE_ID = 17
	    AND A.SITE_DATATYPE_ID = B.SITE_DATATYPE_ID
	      AND START_DATE_TIME BETWEEN to_date(:firstday, 'dd-mon-yyyy hh24:mi:ss') AND to_date(:thisday, 'dd-mon-yyyy hh24:mi:ss');
  
  EXEC SQL DECLARE CC CURSOR FOR
    SELECT A.START_DATE_TIME, A.VALUE
      FROM R_DAY A, HDB_SITE_DATATYPE B
	WHERE B.SITE_ID = :site_id
	  AND B.DATATYPE_ID = 29
	    AND A.SITE_DATATYPE_ID = B.SITE_DATATYPE_ID
	      AND START_DATE_TIME BETWEEN to_date(:firstday, 'dd-mon-yyyy hh24:mi:ss') AND to_date(:thisday, 'dd-mon-yyyy hh24:mi:ss');
  
  EXEC SQL DECLARE DD CURSOR FOR
    SELECT A.START_DATE_TIME, A.VALUE
      FROM R_DAY A, HDB_SITE_DATATYPE B
	WHERE B.SITE_ID = :site_id
	  AND B.DATATYPE_ID = 42
	    AND A.SITE_DATATYPE_ID = B.SITE_DATATYPE_ID
	      AND START_DATE_TIME BETWEEN to_date(:firstday, 'dd-mon-yyyy hh24:mi:ss') AND to_date(:thisday, 'dd-mon-yyyy hh24:mi:ss');
  
  EXEC SQL OPEN BASE;
  
  count_base = 0;
  while (sqlca.sqlcode <= 0)
    {
      EXEC SQL FETCH BASE
	INTO :dater_base:value_null_indicator;
      if(sqlca.sqlcode <= 0)
	{
      strcpy(date_out_base[count_base],dater_base);
      val_null_base[count_base]= value_null_indicator;
	}
      count_base = count_base +1;
    }

  EXEC SQL OPEN AA;

  count1 = 0;
  while (sqlca.sqlcode <= 0)
    {    
      EXEC SQL FETCH AA
	INTO :dater1,:value1:value_null_indicator;
      if(sqlca.sqlcode <= 0)
	{
	  strcpy(date_out1[count1],dater1);
	  vals1[count1] = value1; 
	  val_null1[count1]= value_null_indicator;
	}
      count1 = count1 + 1;
    }

  EXEC SQL OPEN BB;

  count2 = 0;
  while (sqlca.sqlcode <= 0)
    {
      EXEC SQL FETCH BB
	INTO :dater2,:value2:value_null_indicator;
      if(sqlca.sqlcode <= 0)
	{
      strcpy(date_out2[count2],dater2);
      vals2[count2] = value2; 
      val_null2[count2]= value_null_indicator;
	}
      count2 = count2 + 1;
    }
  EXEC SQL OPEN CC;

  count3 = 0;
  while (sqlca.sqlcode <= 0)
    {
      EXEC SQL FETCH CC
	INTO :dater3,:value3:value_null_indicator;
      if(sqlca.sqlcode <= 0)
	{
      strcpy(date_out3[count3],dater3);
      vals3[count3] = value3; 
      val_null3[count3]= value_null_indicator;
	}
      count3 = count3 + 1;
    }
  
  EXEC SQL OPEN DD;

  count4 = 0;
  while (sqlca.sqlcode <= 0)
    {
      EXEC SQL FETCH DD
	INTO :dater4,:value4:value_null_indicator;
      if(sqlca.sqlcode <= 0)
	{
      strcpy(date_out4[count4],dater4);
      vals4[count4] = value4; 
      val_null4[count4]= value_null_indicator;
	}
      count4 = count4 + 1;
    }



  /*PART 3 ALIGNMENT AND TEST FOR MISSING DATA*/

  /*This section compares the contents of date_out_base[] and date_out#[].
    If the contents are the same for a given value of 'i' then we know
    that the value in val#[i] corresponds to the the date in date_out_base[i]
    in this case the value is transferred to a new variable array called
    final#[i].  If date_out_base[] is not the same as date_out#[] then the
    value in vals#[] does not correspond to the date in date_out_base[]
    so a routine is kicked off which searches all the values in date_out# 
    for a match to the value in date_out_base[i].  If a match is found
    then the value in vals#[j] in passed to final#[i] and the loop
    is then broken.  If no match is found then the marker value '998877' is 
    assigned to final#[i] which indicates that the data value is missing*/

  /*The first part of this initializes the final[] arrays as missing then later,
    if the values exist,they are written over the old values.  This is necessary
    when the query has missing data in the first slot.  Initially I did not write
    this in the code but found the problem in testing the program.  In the checking 
    loops below I reassign the value '998877' to data that is missing.  This may not 
    be necessary but it does no harm so I left it alone.*/

  for(i=0;i<count_base;i++)
    {
      final1[i] = 998877;
      test_a = strcmp(date_out_base[i],date_out1[i]);
      if((test_a == 0)) 
	{
	  final1[i] = vals1[i];
	}
      else
	{
	  for (j=0;j < count1-1;j++)
	    {
	      test_b = strcmp(date_out_base[i],date_out1[j]);
	     
	      if((test_b == 0))
		{
		  final1[i] = vals1[j];
		  j = count_base;
		}
	    }
	}
    }

 for(i=0;i<count_base;i++)
    {
      final2[i] = 998877;
      test_a = strcmp(date_out_base[i],date_out2[i]);
      if((test_a == 0)) 
	{
	  final2[i] = vals2[i];
	}
      else
	{
	  for (j=0;j < count2-1;j++)
	    {
	      test_b = strcmp(date_out_base[i],date_out2[j]);
	      if((test_b == 0))
		{
		  final2[i] = vals2[j];
		  j = count_base;
		}
	    }
	}
    }

for(i=0;i<count_base;i++)
    {
      final3[i] = 998877;
      test_a = strcmp(date_out_base[i],date_out3[i]);
      if((test_a == 0)) 
	{
	  final3[i] = vals3[i];
	}
      else
	{
	  for (j=0;j < count3-1;j++)
	    {
	      test_b = strcmp(date_out_base[i],date_out3[j]);
	      if((test_b == 0))
		{
		  final3[i] = vals3[j];
		  j = count_base;
		}
	    }
	}
    }

for(i=0;i<count_base;i++)
    {
      final4[i] = 998877;
      test_a = strcmp(date_out_base[i],date_out4[i]);
      if((test_a == 0)) 
	{
	  final4[i] = vals4[i];
	}
      else
	{
	  for (j=0;j < count4-1;j++)
	    {
	      test_b = strcmp(date_out_base[i],date_out4[j]);
	      if((test_b == 0))
		{
		  final4[i] = vals4[j];
		  j = count_base;
		}
	    }
	}
    }
  
  /*PART 4 CONVERSION OF DATA VALUES TO STRINGS AND PRINTING OF DATA*/
  
  /*Now that all the data is aligned such that the values correspond to the proper dates
    and all missing data is identified with the marker value '998877' we format the data
    for printing.  All data values that equal '998877' are converted to '    ---' and then
    the data is printed out in column format.*/

  for(i=0; i < count_base-1; i++)
    {
      if(final1[i] == 998877) 
	{
	  sprintf(final1c[i],"    ---\0");
	}
      else
	{
	  sprintf(final1c[i],"%7.2f",final1[i]);
	}

      if((final2[i] == 998877) || (val_null2[i] == -1))
	{
	  sprintf(final2c[i],"       ---\0");
	}
      else
	{
	  sprintf(final2c[i],"%10.0f",final2[i]);
	}

      if((final3[i] == 998877) || (val_null3[i] == -1))
	{
	  sprintf(final3c[i],"       ---\0");
	}
      else
	{
	  sprintf(final3c[i],"%10.0f",final3[i]);
	}
       if((final4[i] == 998877) || (val_null4[i] == -1))
	{
	  sprintf(final4c[i],"       ---\0");
	}
      else
	{
	  sprintf(final4c[i],"%10.0f",final4[i]);
	}
      printf("       %s     %s   %s   %s   %s\n",date_out_base[i],final1c[i],final2c[i],final3c[i],final4c[i]);

    }
  
  printf("\n     All data is provisional and subject to review and modification\n\n");


  /*All that is below this line is just error handling stuff*/
  
  if ((result = SqlDisconnect ()) == ERROR)
    exit(ERROR);
  
  exit (0);
  
 errrpt:
  
  EXEC SQL WHENEVER SQLERROR CONTINUE;
  fprintf (stderr, "\n %.70s \n",sqlca.sqlerrm.sqlerrmc);
  if ((result = SqlDisconnect ()) == ERROR)
    exit (ERROR);
  exit (1); 
  
}









