CREATE OR REPLACE PACKAGE BODY populate_pk IS
   FUNCTION get_pk_val ( table_name IN  VARCHAR2, set_pkval IN BOOLEAN ) RETURN number
   IS
      select_stmt     VARCHAR2(300) := NULL;
      curs_col_name   INTEGER := DBMS_SQL.OPEN_CURSOR;
      curs_nxt_val    INTEGER := DBMS_SQL.OPEN_CURSOR;
      curs_ret_val    INTEGER;
      loc_col_name    VARCHAR2(100) := NULL;
      loc_pk_val      number(11) := NULL;
      couldnt_generate_pk     EXCEPTION;
      PRAGMA EXCEPTION_INIT( couldnt_generate_pk, -20001 );
   BEGIN
      select_stmt := 'SELECT a.column_name';
      select_stmt := select_stmt||' FROM all_cons_columns a, all_constraints b';
      select_stmt := select_stmt||' WHERE a.constraint_name = b.constraint_name';
      select_stmt := select_stmt||' AND   b.table_name = '''||table_name||'''';
      select_stmt := select_stmt||' AND   b.constraint_type = ''P''';
      dbms_output.put_line(select_stmt);
      DBMS_SQL.PARSE( curs_col_name, select_stmt, DBMS_SQL.NATIVE );
      DBMS_SQL.DEFINE_COLUMN_CHAR( curs_col_name, 1, loc_col_name, 100 );
      curs_ret_val := DBMS_SQL.EXECUTE_AND_FETCH( curs_col_name );
      DBMS_SQL.COLUMN_VALUE_CHAR( curs_col_name, 1, loc_col_name );
      DBMS_SQL.CLOSE_CURSOR( curs_col_name );
      IF loc_col_name IS NULL THEN
         -- UH, OH!!!!  We could not get the name of the primary key
         -- We need this to generate the next value for the primary key.
         -- I will raise an application error here...
         raise couldnt_generate_pk;
         return 0;
      ELSE
         -- now, dynamically lookup the max(<primary_key>) value, and add one to it.
         select_stmt := 'SELECT max('||loc_col_name||') FROM '||table_name;
         DBMS_SQL.PARSE( curs_nxt_val, select_stmt, DBMS_SQL.NATIVE );
         DBMS_SQL.DEFINE_COLUMN( curs_nxt_val, 1, loc_pk_val );
         curs_ret_val := DBMS_SQL.EXECUTE_AND_FETCH( curs_nxt_val );
         DBMS_SQL.COLUMN_VALUE( curs_nxt_val, 1, loc_pk_val );
         DBMS_SQL.CLOSE_CURSOR( curs_nxt_val );
         IF loc_pk_val IS NULL THEN
	    -- No longer assume error; instead, assume that table is 
	    -- empty and set the PK value to 1. Marra, 6/00
	    -- 
            -- UH, OH!!!  Couldn't get the max value from the table.
            -- raise application error
            -- raise couldnt_generate_pk;
            -- return 0;
	    loc_pk_val := 1;
	    return loc_pk_val;
         ELSE
            loc_pk_val := loc_pk_val + 1;
            /* this is required to integrate DECODES into HDB  since DECODES uses sequences
               we need to insure that anyone adding sites must use the sequence
               modification by Mark Bogner  Mary 2005  */
            if (upper(table_name) = 'HDB_SITE') then
              select hdb_site_sequence.nextval into loc_pk_val from dual;
            end if;
            return loc_pk_val;
         END IF;
      END IF;
      -- Oracle Consulting: Gary Coy 5-NOV-1998
      -- This is only left here for historical purposes.
      -- This is the "other" method for getting the primary key.
      -- On 5, NOV, 1998, Tom Ryan and I decided to use the method
      -- of selecting the max(<primary_key>) value from the table,
      -- and adding one to it.  This was decided to elimate any question
      -- of sequences getting "out of whack", or using "strange numbers"
      -- If anyone decides to "switch back" and implement sequences,
      -- the commented code below is all that is needed...
      --select_stmt := 'SELECT '||table_name||'_seq.nextval FROM DUAL';
      --DBMS_SQL.PARSE( curs, select_stmt , DBMS_SQL.NATIVE );
      --DBMS_SQL.DEFINE_COLUMN( curs, 1, loc_pk_val );
      --curs_ret_val := DBMS_SQL.EXECUTE_AND_FETCH( curs );
      --DBMS_SQL.COLUMN_VALUE( curs, 1, loc_pkval );
      --DBMS_SQL.CLOSE_CURSOR( curs );
      --IF set_pkval THEN
      --   populate_pk.pkval_pre_populated := TRUE;
      --ELSE
      --   populate_pk.pkval_pre_populated := FALSE;
      --END IF;
      --return loc_pkval;
   END get_pk_val;

  PROCEDURE SET_PRE_POPULATED ( P_SET_VALUE  NUMBER)
   IS
    BEGIN
    /*  This procedure was written to set the PK populated boolean
         0  = TRUE
         anything else = FALSE
        
        this procedure written by Mark Bogner   May 2012                            */

      IF P_SET_VALUE = 0 THEN
        populate_pk.pkval_pre_populated := TRUE;
      ELSE
       populate_pk.pkval_pre_populated := FALSE;
      END IF;

        
    END;  /* End of Procedure SET_PRE_POPULATED  */     


END;
/
