CREATE OR REPLACE FUNCTION DATES_BETWEEN (start_date_time IN DATE,
                                         end_date_time IN DATE DEFAULT NULL,
                                         interval VARCHAR2 DEFAULT 'day')
RETURN date_array
PIPELINED

 /* This function returns a list of datetimes beginning at the 
    specified start_date, spaced at the specified interval,
    and ending at the specified end time. 

    Initially written by Andrew Gilmore, May 23, 2008

    Altered to an open end interval by Andrew Gilmore, Jan 24, 2018 
    Note: Inconsistent behavior is in use by many queries, and in LC,YAO is left in old state(without open-end interval change)
  */

IS
end_date DATE := end_date_time;
start_date DATE := start_date_time;
dates date_object := date_object(NULL);
temp_chars VARCHAR2(30);
BEGIN
  IF end_date < start_date THEN
    deny_action('End date must be after start date!');
  END IF;

  BEGIN
    SELECT interval_name
    INTO temp_chars
    FROM hdb_interval
    WHERE interval_name = interval;

  EXCEPTION WHEN others THEN
    deny_action('Dates between function INVALID ' || interval || ' interval');
  END;

  CASE interval
  WHEN 'instant' THEN
    deny_action('Cannot use instant interval in dates_between! Use instants_between.');

  WHEN 'hour' THEN
    IF end_date IS NULL THEN
      end_date := TRUNC(sysdate,   'HH24') + 1 / 24;
    END IF;
    FOR i IN 0 ..(end_date -start_date) *24 - 1
    LOOP
      dates.date_time := start_date_time + i / 24;
      pipe ROW(dates);
    END LOOP;

  WHEN 'day' THEN
    IF end_date IS NULL THEN
      end_date := TRUNC(sysdate,   'DD') + 1;
    END IF;
    FOR i IN 0 ..(end_date -start_date) - 1
    LOOP
      dates.date_time := start_date_time + i;
      pipe ROW(dates);
    END LOOP;

  WHEN 'month' THEN
    IF end_date IS NULL THEN
      end_date := TRUNC(sysdate,   'MM');
    END IF;
    /* months_between takes the later date first */
    FOR i IN 0 .. months_between(end_date,   start_date)
    LOOP
      dates.date_time := add_months(start_date,   i);
      pipe ROW(dates);
    END LOOP;

  WHEN 'year' THEN
    IF end_date IS NULL THEN
      end_date := TRUNC(sysdate,   'YYYY');
    END IF;
    /* months_between takes the later date first */
    FOR i IN 0 .. months_between(end_date,   start_date) / 12 
    LOOP
      dates.date_time := add_months(start_date,   i *12);
      pipe ROW(dates);
    END LOOP;

  WHEN 'wy' THEN
    IF end_date IS NULL THEN
      end_date := add_months(TRUNC(sysdate,   'YYYY'),   -3);
    END IF;
    /* months_between takes the later date first */
    FOR i IN 0 .. months_between(end_date,   start_date) / 12
    LOOP
      dates.date_time := add_months(start_date,   i *12);
      pipe ROW(dates);
    END LOOP;
  END CASE;

  RETURN;
END dates_between;
.
/

show errors
GRANT EXECUTE ON dates_between TO PUBLIC;
CREATE OR REPLACE PUBLIC SYNONYM dates_between FOR dates_between;
