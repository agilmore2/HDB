/*****************************************************************************
* DESCRIPTION
* This file contains functions which perform various Ingres date operations.
*
* AUTHOR - EDITORS
* Carol Marra
*****************************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <malloc.h>
#include <math.h>
#include <ctype.h>
#include <string.h>
#include <defines.h> 
#include <typedefs.h>
#include <dbutils.h>
#include <utils.h>

EXEC SQL INCLUDE sqlca;
EXEC SQL INCLUDE sqlda;

/*****************************************************************************/
#define FUNC_NAME	"SqlDateTrunc"

/*
<HTML>

<P> <STRONG>Function name:</STRONG> SqlDateTrunc

<P> <STRONG>Function signature:</STRONG> int SqlDateTrunc (SQL_DATE , char *, SQL_DATE)

<P> <STRONG>Function description:</STRONG> Truncate a date to the specified interval, e.g., 15-JAN-1998 14:58:14 truncated to month is 01-JAN-1998 00:00:00.

<P><DL> <STRONG>Function arguments:</STRONG>
<BR><DD> SQL_DATE date:      The date to be truncated (dd-mon-yyyy hh24:mi:ss)
<BR><DD> char *datePart:     The interval to which to truncate; e.g., hh24, month.
<BR><DD> SQL_DATE dateTrunc: The truncated date (dd-mon-yyyy hh24:mi:ss).
</DL>

<P> <STRONG>Function return value:</STRONG> OK or ERROR

</HTML>
*/

int SqlDateTrunc (SQL_DATE date, char * datePart, SQL_DATE dateTrunc)
{
   EXEC SQL BEGIN DECLARE SECTION;
   SQL_DATE sqlDateTrunc;
   SQL_DATE sqlDate;
   SQL_DATE sqlDatePart;
   EXEC SQL END DECLARE SECTION;
   
   int result;
   
   strncpy(sqlDatePart, datePart, SQL_DATE_LENGTH);
   strncpy(sqlDate, date, SQL_DATE_LENGTH);

   /* Can't truncate to seconds, so handle this case specially. */
   if (!strcmp (datePart, SECOND))
   {
      strncpy (dateTrunc, sqlDate, SQL_DATE_LENGTH);
      return (OK);
   }

   EXEC SQL AT :current_dbsite SELECT 
      TO_CHAR(TRUNC(TO_DATE(:sqlDate, 'dd-mon-yyyy hh24:mi:ss'), :sqlDatePart),
	'dd-mon-yyyy hh24:mi:ss')
      INTO :sqlDateTrunc
      FROM DUAL;
   
   if ((result = SqlErrorHandler 
	(FUNC_NAME, FALSE,
	 "Error truncating %s to %s.\n\tExiting.", date, datePart)) == ERROR)
   {		
      EXEC SQL AT :current_dbsite ROLLBACK;
      return (ERROR);
   }
  
#ifdef DEBUG
  fprintf (stdout, "%s\n", select_statement);
#endif 
  
  strncpy (dateTrunc, sqlDateTrunc, SQL_DATE_LENGTH);
  
  return (OK);
}

#define FUNC_NAME	"SqlGetDate"
/*
<HTML>

<P> <STRONG>Function name:</STRONG> SqlGetDate 

<P> <STRONG>Function signature:</STRONG> int SqlGetDate (SQL_DATE)

<P> <STRONG>Function description:</STRONG> Get the current date.

<P><DL> <STRONG>Function arguments:</STRONG>
<BR><DD> SQL_DATE date: The current date, retrieved (dd-mon-yyyy hh24:mi:ss)
</DL>

<P> <STRONG>Function return value:</STRONG> OK or ERROR

</HTML>
*/

int SqlGetDate (SQL_DATE date)
{
   EXEC SQL BEGIN DECLARE SECTION;
   SQL_DATE sqlCurDate;
   EXEC SQL END DECLARE SECTION;
   
   int result;
   
   EXEC SQL AT :current_dbsite SELECT TO_CHAR(SYSDATE, 'dd-mon-yyyy')
      INTO :sqlCurDate
      FROM DUAL;
   
  if ((result = SqlErrorHandler 
       (FUNC_NAME, FALSE,
	"Problem getting current date/time.\n\tExiting.")) == ERROR)
    {	
      EXEC SQL AT :current_dbsite ROLLBACK;
      return (ERROR);
    }

  sqlCurDate[11] = NULL;
  snprintf (date, SQL_DATE_LENGTH, "%s %s", sqlCurDate, "00:00:00");

  return (OK);
}

/*****************************************************************************/
#define FUNC_NAME	"SqlGetDateTime"
/*
<HTML>

<P> <STRONG>Function name:</STRONG> SqlGetDateTime

<P> <STRONG>Function signature:</STRONG> int SqlGetDateTime (SQL_DATE)

<P> <STRONG>Function description:</STRONG> Get the current date and time.

<P><DL> <STRONG>Function arguments:</STRONG>
<BR><DD> SQL_DATE date: The current date and time, retrieved (dd-mon-yyyy hh24:mi:ss).
</DL>

<P> <STRONG>Function return value:</STRONG> OK or ERROR

</HTML>
*/

int SqlGetDateTime (SQL_DATE date)
{
   EXEC SQL BEGIN DECLARE SECTION;
   SQL_DATE sqlCurDate;
   EXEC SQL END DECLARE SECTION;
   
   int result;
   
   EXEC SQL AT :current_dbsite SELECT TO_CHAR(SYSDATE, 'dd-mon-yyyy hh24:mi:ss')
      INTO :sqlCurDate
      FROM DUAL;
   
   if ((result = SqlErrorHandler 
	(FUNC_NAME, FALSE,
	 "Problem getting current date/time.\n\tExiting.")) == ERROR)
   {	
      EXEC SQL AT :current_dbsite ROLLBACK;
      return (ERROR);
   }

  strncpy(date, sqlCurDate, SQL_DATE_LENGTH);
  
  return (OK); 
}

/*************************************************************************/

#define FUNC_NAME "SqlFormatDate"
/*
<HTML>

<P> <STRONG>Function name:</STRONG> SqlFormatDate

<P> <STRONG>Function signature:</STRONG> int SqlFormatDate (char [300], SQL_DATE)

<P> <STRONG>Function description:</STRONG> Format the supplied data into the format used by all other date functions (dd-mon-yyyy hh24:mi:ss). 

<P><DL> <STRONG>Function arguments:</STRONG>
<BR><DD> char date[300]:         The date to be formatted, in day-month-year OR month/day/year format.
<BR><DD> SQL_DATE formattedDate: The formatted version of the date DD-MON-YYYY HH24:MI:SS.
</DL>

<P> <STRONG>Function return value:</STRONG> OK or ERROR

</HTML>
*/

int SqlFormatDate(char date[300], SQL_DATE formattedDate)
{
   EXEC SQL BEGIN DECLARE SECTION;
   SQL_DATE sqlCharDate;
   SQL_DATE sqlDate;
   EXEC SQL END DECLARE SECTION;

   int i;
   int result;
   int restLen;
   int monthLen;   
   char zeros[5];
   
   char *day;
   char tempDay[25];
   char *month;
   char tempMonth[25];
   char *year;
   char tempYear[25];
   char *hour;
   char tempHour[25];
   char *minute;
   char tempMinute[25];
   char *second;
   char tempSecond[25];
   char *rest;
   char *lastRest;

   strncpy(zeros, "00\0", 5);
 	  
   strncpy(sqlDate, date, SQL_DATE_LENGTH);
   sqlDate[20] = NULL;

   /* Parse date string based on delimiter: day-month-year OR month/day/year */
   if (!strstr (sqlDate, "-"))
   {
      month = strtok(sqlDate, "/");
      day = strtok (NULL, "/");
      rest   = strtok(NULL, "/");
   }
   else
   {
      day = strtok(sqlDate, "-");
      month  = strtok(NULL, "-");
      rest   = strtok(NULL, "-");
   }
   restLen = strlen(rest);
   if(restLen < 5)
   {
      if (!strstr (rest, "-"))
	 year = strtok (rest, "/");
      else
	 year   = strtok(rest, "-");
      hour   = zeros;
      minute = zeros;
      second = zeros;
   }
   else
   {
      year   = strtok(rest, " ");
      hour   = strtok(NULL, ":");
      lastRest = strtok(NULL, " ");
      if(strlen(lastRest) > 2)
      {
	 minute = strtok(lastRest, ":");
	 second = strtok(NULL, ":");
      }
      else
      {
	 minute = strtok(lastRest, ":");
	 second = zeros;
      }
   }
   
   if(strlen(day) < 2)
   {
      snprintf(tempDay, 25, "0%s", day);
      day = tempDay;
   }
   else
   {
      strncpy(tempDay, day, 25);
      tempDay[3] = '\0';
      day = tempDay;  
   }
   
   monthLen = strlen(month); 
   if(monthLen < 2)
   {
      snprintf(tempMonth, "0%s", month);
      month = tempMonth;
      for(i = 0; month[i] != NULL; i++)
	 month[i] = toupper(month[i]);
   } 
   else
   {
      strncpy(tempMonth, month, 25);
      tempMonth[3] = '\0';
      month = tempMonth;
   }
   
   if(strlen(year) < 4)
   {
      PrintError ("Year must be 4 digits!\n\tExiting.");
      return (ERROR);
   }
   
   else
   {
      strncpy(tempYear, year, 25);
      tempYear[4] = '\0';
      year = tempYear;
   }
   
   if(strlen(hour) < 2)
   {
      snprintf(tempHour, 25, "0%s", hour);
      hour = tempHour;
   }
   else
   {
      strncpy(tempHour, hour, 25);
      tempHour[3] = '\0';
      hour = tempHour;
   }
   if(strlen(minute) < 2)
   {
      snprintf(tempMinute, 25, "0%s", minute);
      minute = tempMinute;
   } 
   else
   {
      strncpy(tempMinute, minute, 25);
      tempMinute[4] = '\0';
      minute = tempMinute;
      }
   
   if(strlen(second) < 2)
   {
      snprintf(tempSecond, 25, "0%s", second);
      second = tempSecond;
   }
   else
   {
      strncpy(tempSecond, second, 25);
      tempSecond[4] = '\0';
      second = tempSecond;
   }
   
   if(monthLen < 3)
   {
      snprintf(sqlDate,SQL_DATE_LENGTH,"%s-%s-%s %s:%s:%s", 
	      day,month,year,hour,minute,second);
      EXEC SQL AT :current_dbsite 
	SELECT TO_CHAR(TO_DATE(:sqlDate, 'DD-MM-YYYY HH24:MI:SS'),
			      'DD-MON-YYYY HH24:MI:SS')
	 INTO :sqlCharDate
	 FROM DUAL; 
      if ((result = SqlErrorHandler 
	   (FUNC_NAME, FALSE,
	    "Problem converting date/time format.\n.")) == ERROR)
      {	
	 EXEC SQL AT :current_dbsite ROLLBACK;
	 return (ERROR);
      }
   }
   else
   {
     snprintf(sqlDate, SQL_DATE_LENGTH, "%s-%s-%s %s:%s:%s", 
	      day,month,year,hour,minute,second); 
     strncpy(sqlCharDate, sqlDate, SQL_DATE_LENGTH);
   }

   strncpy(formattedDate, sqlCharDate, SQL_DATE_LENGTH);
   return(OK);
}

/*****************************************************************************/

#define FUNC_NAME	"SqlExtractDatePart"
/*
<HTML>

<P> <STRONG>Function name:</STRONG> SqlExtractDatePart

<P> <STRONG>Function signature:</STRONG> int SqlExtractDatePart (SQL_DATE, char *, int *);

<P> <STRONG>Function description:</STRONG> Extract and return the integer representation of the specified part (e.g., day, month, year) of the date passed in.

<P><DL> <STRONG>Function arguments:</STRONG>
<BR><DD> SQL_DATE date:  Date (dd-mon-yyyy hh24:mi:ss).
<BR><DD> char *datePart: The part (e.g., day, hh24) to be extracted.
<BR><DD> int intPart:    Integer representation of the date part, retrieved.
</DL>

<P> <STRONG>Function return value:</STRONG> OK or ERROR

</HTML>
*/
int SqlExtractDatePart (SQL_DATE date, char *datePart, int *intPart)  
{ 
   EXEC SQL BEGIN DECLARE SECTION;
   SQL_DATE sqlCharDate,
            sqlDate;
   EXEC SQL END DECLARE SECTION;
  
   int result;
   int tempInt;
   int restLen;
   int monthLen;
   char zeros[5];

   char *day;
   char tempDay[25];
   char *month;
   char tempMonth[25];
   char *year;
   char tempYear[25];
   char *hour;
   char tempHour[25];
   char *minute;
   char tempMinute[25];
   char *second;
   char tempSecond[25];
   char *rest;

   strncpy(zeros, "00\0", 5);
 	  
   strncpy(sqlDate, date, SQL_DATE_LENGTH);
   sqlDate[20] = '\0';
#ifdef DEBUG
   fprintf (stdout, "%s\n", select_statement);
#endif 

   day = strtok(sqlDate, "-");
   month  = strtok(NULL, "-");
   rest   = strtok(NULL, "-");
   restLen = strlen(rest);
   if(restLen < 5)
   {
      year   = strtok(rest, "-");
      hour   = NULL;
      minute = NULL;
      second = NULL;
   }
   else
   {
      year   = strtok(rest, " ");
      hour   = strtok(NULL, ":");
      rest   = strtok(NULL, ":");
      if(strlen(rest) > 2)
      {
	 minute = strtok(rest, ":");
	 second = strtok(NULL, ":");
      }
      else
      {
	 minute = strtok(rest, ":");
	 second = zeros;
      }
   }
   
   if(strlen(day) < 2)
   {
      snprintf(tempDay, 25, "0%s", day);
      day = tempDay;
   }
   else
   {
      strncpy(tempDay, day, 25);
      tempDay[3] = '\0';
      day = tempDay;  
   }
   
   monthLen = strlen(month); 
   if(monthLen < 2)
   {
      snprintf(tempMonth, 25, "0%s", month);
      month = tempMonth;
   } 
   else
   {
      strncpy(tempMonth, month, 25);
      tempMonth[4] = '\0';
      month = tempMonth;
   }
   
   if(strlen(year) < 4)
   {
      PrintError ("%s: Year must be 4 digits.\n\tExiting.\n", FUNC_NAME);
      return (ERROR);
   }
   
   else
   {
      strncpy(tempYear, year, 25);
      tempYear[4] = '\0';
      year = tempYear;
   }
   if(restLen > 5)
   {
      if(strlen(hour) < 2)
      {
	 snprintf(tempHour, 25, "0%s", hour);
	 hour = tempHour;
      }
      else
      {
	 strncpy(tempHour, 25, hour);
	 tempHour[3] = '\0';
	 hour = tempHour;
      }
      if(strlen(minute) < 2)
      {
	 snprintf(tempMinute, 25, "0%s", minute);
	 minute = tempMinute;
      } 
      else
      {
	 strncpy(tempMinute, minute, 25);
	 tempMinute[4] = '\0';
	 minute = tempMinute;
      }
      
      if(strlen(second) < 2)
      {
	 snprintf(tempSecond, 25, "0%s", second);
	 second = tempSecond;
      }
      else
      {
	 strncpy(tempSecond, second, 25);
	 tempSecond[4] = '\0';
	 second = tempSecond;
      }

      if(monthLen > 2)
      {
	 snprintf(sqlDate,SQL_DATE_LENGTH,"%s-%s-%s %s:%s:%s", 
		 day,month,year,hour,minute,second);
	 EXEC SQL AT :current_dbsite 
	    SELECT TO_CHAR(TO_DATE(:sqlDate, 'DD-MON-YYYY HH24:MI:SS'),
			   'DD-MM-YYYY HH24:MI:SS')
	    INTO :sqlCharDate
	    FROM DUAL; 
	 if ((result = SqlErrorHandler 
	      (FUNC_NAME, FALSE,
	       "Problem converting date/time format.\n.")) == ERROR)
	 {	
	    EXEC SQL AT :current_dbsite ROLLBACK;
	    return (ERROR);
	 }
      }
   }
   
   else
   {
      if(monthLen > 2)
      {
	 snprintf(sqlDate,SQL_DATE_LENGTH,"%s-%s-%s", day,month,year);
	 EXEC SQL AT :current_dbsite 
	    SELECT TO_CHAR(TO_DATE(:sqlDate, 'DD-MON-YYYY'),
			   'DD-MM-YYYY')
	    INTO :sqlCharDate
	    FROM DUAL; 
	 if ((result = SqlErrorHandler 
	      (FUNC_NAME, FALSE,
	       "Problem converting date/time format.\n.")) == ERROR)
	 {	
	    EXEC SQL AT :current_dbsite ROLLBACK;
	    return (ERROR);
	 }
      }
   }

 sqlDate[20] = NULL;
 
   if(monthLen > 2)
   {
      day = strtok(sqlCharDate, "-");
      month = strtok(NULL, "-");
   }
   
   if(strncmp(datePart, MONTH, strlen(MONTH))==0)
   {
      tempInt = atoi(month);
   }

   else if(strncmp(datePart, DAY, strlen(DAY))==0)
   {
      tempInt = atoi(day);
   }
   
   else if(strncmp(datePart, YEAR, strlen (YEAR))==0)
   {
      tempInt = atoi(year);
   }
  
   else if(strncmp(datePart, HOUR, strlen (HOUR))==0)
   {
      if(hour == NULL)
	 printf("This date/time: %s does not include the hours field\n",
		date);
      else
      {
	 tempInt = atoi(hour);
      }
   }
   
   else if(strncmp(datePart, MINUTE, strlen (MINUTE))==0)
   {
      if(minute == NULL)
	 printf("This date/time: %s does not include the minute field\n",
		date);
      else
      {
	 tempInt = atoi(minute);
      }
   }
   
   else if(strncmp(datePart, SECOND, strlen (SECOND))==0)
   {
      if(second == NULL)
	 printf("This date/time: %s does not include the second field\n",
		date);
      else
      {
	 tempInt = atoi(second);
      }
   }
   *intPart = tempInt;
   return (OK);
}

/****************************************************************************/
#define FUNC_NAME	"SqlNumDaysBetweenDates"
#define NCOLS		1

/*
<HTML>

<P> <STRONG>Function name:</STRONG> SqlNumDaysBetweenDates

<P> <STRONG>Function signature:</STRONG> int SqlNumDaysBetweenDates(SQL_DATE, SQL_DATE, int *)

<P> <STRONG>Function description:</STRONG> Get the number of days between 2 dates.

<P><DL> <STRONG>Function arguments:</STRONG> 
<BR><DD> SQL_DATE sDate: Start date (dd-mon-yyyy hh24:mi:ss).
<BR><DD> SQL_DATE eDate: End date (dd-mon-yyyy hh24:mi:ss).
<BR><DD> int *numdays:   Number of days between dates.
</DL>

<P> <STRONG>Function return value:</STRONG> OK or ERROR

</HTML>
*/
int SqlNumDaysBetweenDates(SQL_DATE sDate, SQL_DATE eDate, int *numDays)
{
   EXEC SQL BEGIN DECLARE SECTION;
   char        sqlStartTime[100];
   char        sqlEndTime[100];
   SQL_DATE        sqlStartDate,
                   sqlEndDate;
   EXEC SQL END DECLARE SECTION;
   
   int result;
  
   result = SqlFormatDate(sDate, sqlStartDate); 
   if (result == ERROR)
      {
	 PrintError ("Start date could not be formatted.\n");
	 return (ERROR);
      }

   result = SqlFormatDate(eDate, sqlEndDate);
   if (result == ERROR)
      {
	 PrintError ("End date could not be formatted.\n");
	 return (ERROR);
      }

   EXEC SQL AT :current_dbsite SELECT 
      TO_CHAR(TO_DATE(:sqlStartDate, 'dd-mon-yyyy HH24:MI:SS'), 'J'), 
      TO_CHAR(TO_DATE(:sqlEndDate, 'dd-mon-yyyy HH24:MI:SS'), 'J')
      INTO :sqlStartTime, :sqlEndTime
      FROM DUAL;
   
   if ((result = SqlErrorHandler 
	(FUNC_NAME, FALSE,
	 "Error retrieving number of days between %s and %s.\n\tExiting.",
	 sDate, eDate)) == ERROR)
   {		
      EXEC SQL AT :current_dbsite ROLLBACK;
      return (ERROR);
   }
   result = atoi(sqlEndTime) - atoi(sqlStartTime) + 1;
   *numDays = result;
   return(OK);
   
}
/****************************************************************************/

#define FUNC_NAME	"SqlDateMath"
/*
<HTML>

<P> <STRONG>Function name:</STRONG> SqlDateMath

<P> <STRONG>Function signature:</STRONG> int SqlDateMath(DATE_MATH_TYPES, SQL_DATE, SQL_DATE, int, char *)

<P> <STRONG>Function description:</STRONG> Add or subtract the specified number of intervals to/from the given date.

<P><DL> <STRONG>Function arguments:</STRONG>
<BR><DD> DATE_MATH_TYPES op: Operator (ADDITION or SUBRTRACTION)
<BR><DD> SQL_DATE startDate: Initial date to operate on (dd-mon-yyyy hh24:mi:ss)
<BR><DD> SQL_DATE endDate:   Resulting date (dd-mon-yyyy hh24:mi:ss).
<BR><DD> int numIntervals:   Number of intervals to add/subtract.
<BR><DD> char *interval:     The interval to add (dd, month, hh24, etc).
</DL>

<P> <STRONG>Function return value:</STRONG> OK or ERROR

</HTML>
*/
int SqlDateMath(DATE_MATH_TYPES op, SQL_DATE startDate, SQL_DATE endDate,
		int numIntervals, char * interval)
{
   EXEC SQL BEGIN DECLARE SECTION;
     SQL_DATE      sqlEndDate,
                   sqlStartDate, 
                   sqlTempDate;
     double        sqlTime;
   EXEC SQL END DECLARE SECTION;
   
   int result,
       month,
       year;
   char dd[4];
   char ddmon[8];
   char hms[10];

   int days_in_month[12] = {31,28,31,30,31,30,31,31,30,31,30,31};
   int the_day;

   sqlEndDate[20] = NULL;
  
   strncpy(sqlStartDate, startDate, SQL_DATE_LENGTH);
   sqlStartDate[20] = NULL; 
  
   if(strcmp(interval, YEAR)==0)
   { 
      /* Save the hour/min/sec portion of date, as add_months blows
	 it away completely. */
      strncpy (ddmon, startDate, 7);
      ddmon[7] = '\0';
      if (SqlExtractDatePart (startDate, YEAR, &year) != OK)
      {
	 PrintError ("Exiting\n");
	 return (ERROR);
      }
	 
      strncpy (hms, strstr (startDate, " "), 10);

      /* Add or subtract appropriate number of years to year, then 
	 reconstruct date. */
      switch (op)
      {
	  case ADDITION: 
	     year += numIntervals;
	     break;
	  case SUBTRACTION:
	     year -= numIntervals;
	     break;
      }

      snprintf (endDate, 25, "%s%d%s", ddmon, year, hms);

      return (OK);
   }

   else if(strcmp(interval, MONTH)==0)
   {
      /* Save all portions of date, as will need to reconstruct
	 it later. */
      strncpy (dd, startDate, 3);
      dd[3] = '\0';
      if (SqlExtractDatePart (startDate, MONTH, &month) != OK)
      {
	 PrintError ("Exiting\n");
	 return (ERROR);
      }

      if (SqlExtractDatePart (startDate, YEAR, &year) != OK)
      {
	 PrintError ("Exiting\n");
	 return (ERROR);
      }
	 
      strncpy (hms, strstr (startDate, " "), 10);

      /* Add or subtract appropriate number of months to month, add years if 
	 necessary, then reconstruct date. */
      switch (op)
      {
	  case ADDITION: 
	     year += (month + numIntervals - 1) / 12;
	     month = (month + numIntervals) % 12;
	     if (month == 0)
		month = 12;
	     break;
	  case SUBTRACTION:
	     if (numIntervals >= month)
   	       year -= ((numIntervals - month) / 12) + 1;

	     month = month - numIntervals;
	     if (month > 0)
		month = month % 12;
	     else if (month < 0)
		month = 12 - (abs(month) % 12);
	     else /* month == 0 */
		month = 12;
	     break;
      }
      /* now adjust the day so that it's not greater than the number
         of days in the month */

      the_day = atoi(dd);
      if (days_in_month[month - 1] < the_day)
      {
        the_day = days_in_month[month - 1];
        /* check for febr. */
        if (month == 2)
        {
          if ( (((year%4) == 0) && ((year%100)!= 0)) || 
             ((year%400)== 0)); /* leapyear */
          the_day = 29;
        }
        snprintf(dd, 4, "%2d-",the_day);
      }

      snprintf (sqlTempDate, SQL_DATE_LENGTH, "%s%d-%d%s", dd, month, year, hms);
      
      if (SqlFormatDate (sqlTempDate, endDate) != OK)
      {
	 PrintError ("Exiting\n");
	 return (ERROR);
      }

      return (OK);
   }
   else if(strcmp(interval, DAY)==0)
      sqlTime = (int)numIntervals;
   else if(strcmp(interval, HOUR)==0)
      sqlTime = (double) numIntervals / 24;
   else if(strcmp(interval, MINUTE)==0)
      sqlTime = (double) numIntervals / 1440;
   else if(strcmp(interval, SECOND)==0)
      sqlTime = (double) numIntervals / SECONDS_IN_DAY;
   else
   {
      PrintError ("Invalid interval: %s. Valid intervals are YEAR, MONTH, DAY, HOUR, MINUTE, SECOND.\n\tExiting.\n", interval);
      return (ERROR);
   }
     
   switch (op)
   {
       case ADDITION: 
	  EXEC SQL AT :current_dbsite SELECT 
	     TO_CHAR(TO_DATE(:sqlStartDate, 'dd-mon-yyyy HH24:MI:SS') 
		     + :sqlTime,'dd-mon-yyyy HH24:MI:SS')
	     INTO :sqlEndDate
	     FROM DUAL;
	   break;
       case SUBTRACTION:
	  EXEC SQL AT :current_dbsite SELECT 
	     TO_CHAR(TO_DATE(:sqlStartDate, 'dd-mon-yyyy HH24:MI:SS') 
		     - :sqlTime,'dd-mon-yyyy HH24:MI:SS')
	     INTO :sqlEndDate
	     FROM DUAL;
	  break;
   }
   
   if ((result = SqlErrorHandler (FUNC_NAME, FALSE, 
				  "Error doing date math on date: %s.",
				  startDate)) != OK)
   {
      EXEC SQL AT :current_dbsite ROLLBACK;
      return (ERROR);
   }
   strncpy(endDate, sqlEndDate, SQL_DATE_LENGTH);
   
   return (OK);
}

/*****************************************************************************/
#define FUNC_NAME	"SqlDateCompare"
/*
<HTML>

<P> <STRONG>Function name:</STRONG> SqlDateCompare

<P> <STRONG>Function signature:</STRONG> int SqlDateCompare(SQL_DATE, SQL_DATE, int *)

<P> <STRONG>Function description:</STRONG> Takes 2 dates and compares them, to the second if necessary.

<P><DL> <STRONG>Function arguments:</STRONG>
<BR><DD> SQL_DATE firstDate:  One of the two dates to be compared (dd-mon-yyyy hh24:mi:ss).
<BR><DD> SQL_DATE secondDate:  The other date to be compared (dd-mon-yyyy hh24:mi:ss).
<BR><DD> int * compareResult: The result of the comparison: 1 if firstDate is greater, -1 if secondDate is greater, 0 if equal.
</DL>

<P> <STRONG>Function return value:</STRONG> OK or ERROR

</HTML>
*/
int SqlDateCompare(SQL_DATE firstDate, SQL_DATE secondDate, int *compareResult)

{
  EXEC SQL BEGIN DECLARE SECTION;
    double return_val;
    SQL_DATE date1,
             date2;
  EXEC SQL END DECLARE SECTION;

  snprintf (date1, SQL_DATE_LENGTH, firstDate);
  snprintf (date2, SQL_DATE_LENGTH, secondDate);

  EXEC SQL AT :current_dbsite SELECT to_date(:date1, 'dd-mon-yyyy hh24:mi:ss') 
     - to_date(:date2, 'dd-mon-yyyy hh24:mi:ss') INTO :return_val
     FROM dual;

  if (SqlErrorHandler (FUNC_NAME, FALSE, "Problem selecting date difference.")
                       != OK) {
      return(ERROR);
  }

  if (return_val < 0) {
    *compareResult = -1;
  }
  else if (return_val == 0) {
     *compareResult = 0;
  }
  else if (return_val > 0) {
     *compareResult = 1;
  }
  else {
     PrintError("Compare Dates Utterly Failed.\n");
     exit(1);
  }
  
  return (OK);
}


/****************************************************************************/
#define FUNC_NAME	"SqlExtractDatePartWithoutCommit"

/* int SqlExtractDatePartWithoutCommit (SQL_DATE date, char * datePart,
			             int *intPart) */

/* Use SqlExtractDatePart in place of this function. */

/*****************************************************************************/
#define FUNC_NAME	"SqlDateCompareWithoutCommit"

    /* int SqlDateCompareWithoutCommit(SQL_DATE firstDate, SQL_DATE secondDate, int *compareResult) */

    /*  Use SqlDateCompare in place of this function. */

/*****************************************************************************/
#define FUNC_NAME	"SqlDateRangeIncludesFeb"
/*
<HTML>

<P> <STRONG>Function name:</STRONG> SqlDateRangeIncludesFeb

<P> <STRONG>Function signature:</STRONG> int SqlDateRangeIncludesFeb (SQL_DATE, SQL_DATE, int *, int*)

<P> <STRONG>Function description:</STRONG> Determines if the date range includes the entire month of February; for leap year testing.

<P><DL> <STRONG>Function arguments:</STRONG>
<BR><DD> SQL_DATE dateLow:  Beginning-of-range date (dd-mon-yyyy hh24:mi:ss).
<BR><DD> SQL_DATE dateHigh: End-of-range date (dd-mon-yyyy hh24:mi:ss).
<BR><DD> int *includesFeb:  Indicator (TRUE, FALSE) if range includes February
<BR><DD> int *yearInd:      Indicator of which year includes February (high: 0,low: 1)
</DL>

<P> <STRONG>Function return value:</STRONG> OK or ERROR

</HTML>
*/

int SqlDateRangeIncludesFeb (SQL_DATE dateLow, SQL_DATE dateHigh,
			     int *includesFeb, int* yearInd)

{
  EXEC SQL BEGIN DECLARE SECTION;
    SQL_DATE sqlDateLow,
             sqlDateHigh,
             feb28;
    int sqlIncludesFeb = 0;
  EXEC SQL END DECLARE SECTION;

  int result,
      year,
      month;
  
  snprintf (sqlDateLow, SQL_DATE_LENGTH, dateLow);
  snprintf (sqlDateHigh, SQL_DATE_LENGTH, dateHigh);
  /*******************************************************
   Determine which Feb 28 to use (which year). If month of the low
   date is later than February, only chance that Feb is included is
   if high date is in next year and includes Feb... 
	*******************************************************/

  if ((result = SqlExtractDatePart (dateLow, MONTH, &month)) != OK)
    return (ERROR);

  if (month > 2)
    {
      if ((result = SqlExtractDatePart (dateHigh, YEAR, &year)) != OK)
	return (ERROR);
      *yearInd = HIGH;
    }
  else
    {
      if ((result = SqlExtractDatePart (dateLow, YEAR, &year)) != OK)
	return (ERROR);
      *yearInd = LOW;
    }
  
  snprintf (feb28, SQL_DATE_LENGTH, "28-feb-%d 00:00:00", year);
  
  EXEC SQL AT :current_dbsite SELECT DISTINCT 1 
    INTO :sqlIncludesFeb 
    FROM dual
    WHERE TO_DATE (:feb28, 'dd-mon-yyyy hh24:mi:ss') BETWEEN 
	TO_DATE (:sqlDateLow, 'dd-mon-yyyy hh24:mi:ss') AND 
	TO_DATE (:sqlDateHigh, 'dd-mon-yyyy hh24:mi:ss');
  if ((result = SqlErrorHandler 
       (FUNC_NAME, TRUE,
	"Error checking for February 28 between %s and %s.", 
	sqlDateLow, sqlDateHigh)) == ERROR)
    {		
      EXEC SQL AT :current_dbsite ROLLBACK;
      return (ERROR);
    }

  EXEC SQL AT :current_dbsite COMMIT;

  *includesFeb = sqlIncludesFeb;

  return (OK);
}


/*****************************************************************************/
#define FUNC_NAME	"SqlSetDateFormatAt"
/*
<HTML>

<P> <STRONG>Function name:</STRONG> SqlSetDateFormatAt

<P> <STRONG>Function signature:</STRONG> int SqlSetDateFormatAt (char *)

<P> <STRONG>Function description:</STRONG> Sets the long date format to be used
throughout the current named session.

<P><DL> <STRONG>Function arguments:</STRONG>
<BR><DD> char *dateFormat:  String indicating the desired format.
</DL>

<P> <STRONG>Function return value:</STRONG> OK or ERROR

</HTML>
*/

int SqlSetDateFormatAt (char *dateFormat)

{
  EXEC SQL BEGIN DECLARE SECTION;
   char setStatement[200];
  EXEC SQL END DECLARE SECTION;

  int result;

  snprintf (setStatement, 200, "ALTER SESSION SET nls_date_format = '%s'",
	   dateFormat);

  EXEC SQL AT :current_dbsite EXECUTE IMMEDIATE :setStatement;

  if ((result = SqlErrorHandler 
       (FUNC_NAME, TRUE,
	"Error setting date format to %s\n", dateFormat)) == ERROR)
    {		
      EXEC SQL AT :current_dbsite ROLLBACK;
      return (ERROR);
    }

  EXEC SQL AT :current_dbsite COMMIT;

  return (OK);
}

/*****************************************************************************/
#define FUNC_NAME	"SqlSetDateFormat"
/*
<HTML>

<P> <STRONG>Function name:</STRONG> SqlSetDateFormat

<P> <STRONG>Function signature:</STRONG> int SqlSetDateFormat (char *)

<P> <STRONG>Function description:</STRONG> Sets the long date format to be used
throughout the current named session. This is the function that most 
applications will need to call to simplify date handling in their own,
non-library, code.

<P><DL> <STRONG>Function arguments:</STRONG>
<BR><DD> char *dateFormat:  String indicating the desired format.
</DL>

<P> <STRONG>Function return value:</STRONG> OK or ERROR

</HTML>
*/

int SqlSetDateFormat (char *dateFormat)

{
  EXEC SQL BEGIN DECLARE SECTION;
   char setStatement[200];
  EXEC SQL END DECLARE SECTION;

  int result;

  snprintf (setStatement, 200, "ALTER SESSION SET nls_date_format = '%s'",
	   dateFormat);

  EXEC SQL EXECUTE IMMEDIATE :setStatement;

  if ((result = SqlErrorHandler 
       (FUNC_NAME, TRUE,
	"Error setting date format to %s\n", dateFormat)) == ERROR)
    {		
      EXEC SQL ROLLBACK;
      return (ERROR);
    }

  EXEC SQL COMMIT;

  return (OK);
}

/*****************************************************************************/
#define FUNC_NAME	"SqlDateSubtract"
/*
<HTML>

<P> <STRONG>Function name:</STRONG> SqlDateSubtract

<P> <STRONG>Function signature:</STRONG> int SqlDateSubtract (SQL_DATE,
SQL_DATE, double *)

<P> <STRONG>Function description:</STRONG> Subtracts the second date from the first date and gives a result in days, including decimal portion 

<P><DL> <STRONG>Function arguments:</STRONG>
<BR><DD> SQL_DATE firstDate:  Initial date for the subtraction.
<BR><DD> SQL_DATE secondDate:  Second date to be subtacted from the first.
<BR><DD> double * resultDays:  Result in days including decimal portion.
</DL>

<P> <STRONG>Function return value:</STRONG> OK or ERROR

</HTML>
*/

int SqlDateSubtract(SQL_DATE firstDate,
                    SQL_DATE secondDate,
                    double* resultDays)
{
   /* This function subtracts the second date from the first date 
      and gives a result in days, including decimal portion */

   EXEC SQL BEGIN DECLARE SECTION;
      SQL_DATE sqlFirstDate;
      SQL_DATE sqlSecondDate;
      double sqlResult;
   EXEC SQL END DECLARE SECTION;

   int result;

   /* Initialize sql variables */
   strncpy (sqlFirstDate, firstDate, SQL_DATE_LENGTH);
   strncpy (sqlSecondDate, secondDate, SQL_DATE_LENGTH);

   /* Call to database to do subtraction */
   EXEC SQL AT :current_dbsite
      SELECT TO_DATE(:sqlFirstDate, 'DD-MON-YYYY HH24:MI:SS')
         - TO_DATE(:sqlSecondDate, 'DD-MON-YYYY HH24:MI:SS')
      INTO :sqlResult 
      FROM DUAL;

   if ((result = SqlErrorHandler(FUNC_NAME, FALSE,
                 "Problem subtracting dates\n")) != OK)
   {
      EXEC SQL ROLLBACK;
      return (ERROR);
   }         

   /* Assign return value */
   *resultDays = sqlResult;

   EXEC SQL AT :current_dbsite COMMIT;
  
   return (OK);
}

