/*This is res_data using a cursor*/
/*Edited by rclayton 8/10/99*/

/* stldlib.h library added by M. Bogner for move to Linux  */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "dbutils.h"
#include "utils.h"
#include "defines.h"
#include "typedefs.h"

main ( int argc, char** argv )
{
  
  EXEC SQL INCLUDE SQLCA;
  
  EXEC SQL BEGIN DECLARE SECTION;

  SQL_DATE      thisday,firstday;
  ID	        site_id, datatype_id;
  short         value_null_indicator;
  float         value1;
  char 		site_name[65],datatype_name[40],unit_name[65],dater_base[12],dater1[12];
  
  EXEC SQL END DECLARE SECTION;
  
  char		*dbName,date_out_base[1000][20],date_out1[1000][20];
  char          final1c[1000][10];
  int           num_days,result,count_base,count1,i,j,test_a,test_b;
  float         vals1[1000],final1[1000];
  short         val_null_base[1000],val_null1[1000];
  EXEC SQL WHENEVER SQLERROR GOTO errrpt;
  
  if (argc != 4)
    {
      printf("\nusage: site_data <site_id> <datatype_id> <number_of_days>\n");
      exit(2);
    }
  
  site_id = atoi(argv[1]);
  datatype_id = atoi(argv[2]);
  num_days = atoi(argv[3]);

  
  
  /* set the name of the database */
  
  dbName = NULL; 
  dbName = getenv("HDB_LOCAL");
  
  if (dbName == NULL)
    {
      PrintError("Environment variable HDB_LOCAL not set...\n");
      return(ERROR);
    }
  
  
  if  ((result = SqlConnect (dbName, "app_user", dbName)) == ERROR)
    exit (ERROR);
  
  fprintf(stdout, "Connected to ORACLE.\n");
  
  
  /* get todays date and places the value as an character string into 'today'*/
  /* specify 'today' gives date without time */
  /* specify 'now' gives date with time */
  
  if ((result = SqlGetDate (thisday)) == ERROR)
    exit(ERROR);
  
  SqlDateMath(SUBTRACTION,thisday,firstday,num_days,"dd");

  /*sprintf(firstday,"01-oct-1998 00:00:00");*/
  
  /*Gets the site_name and prints a header for the printout*/  
  
  EXEC SQL SELECT SITE_NAME
    INTO :site_name:value_null_indicator
      FROM HDB_SITE
	WHERE SITE_ID = :site_id;
  if ((sqlca.sqlcode > 0) || (value_null_indicator == -1))
    {		
      printf("Error retrieving site id %d\n",site_id);
      exit(2);
    }
  
  EXEC SQL SELECT DATATYPE_NAME
    INTO :datatype_name:value_null_indicator
      FROM HDB_DATATYPE
	WHERE DATATYPE_ID = :datatype_id;
  if ((sqlca.sqlcode > 0) || (value_null_indicator == -1))
    {		
      printf("Error retrieving datatype id %d\n",datatype_id);
      exit(3);
    }

/*This section is convert long datatype_names to more reasonable lengths*/
/*to prevent wrapping on the screen-- if a new datatype is found to wrap*/
/*it may be added to the list by simply creating a new line and editing*/

  if (datatype_id == 3) {strcpy(datatype_name,"precipitation reading");}
  if (datatype_id == 13) {strcpy(datatype_name,"head");}
  if (datatype_id == 15) {strcpy(datatype_name,"bank storage");}
  if (datatype_id == 17) {strcpy(datatype_name,"reservoir storage");}
  if (datatype_id == 24) {strcpy(datatype_name,"instantaneous elevation");}
  if (datatype_id == 27) {strcpy(datatype_name,"percent ice cover");}
  if (datatype_id == 41) {strcpy(datatype_name,"total releases");}
  if (datatype_id == 42) {strcpy(datatype_name,"total releases");}
  if (datatype_id == 43) {strcpy(datatype_name,"total releases");}
  if (datatype_id == 49) {strcpy(datatype_name,"water surface elevation");}
  if (datatype_id == 50) {strcpy(datatype_name,"snow water equivelent");}
  if (datatype_id == 59) {strcpy(datatype_name,"unregulated streamflow");}
  if (datatype_id == 60) {strcpy(datatype_name,"unregulated streamflow");}
  if (datatype_id == 73) {strcpy(datatype_name,"power generated");}
  if (datatype_id == 83) {strcpy(datatype_name,"tailrace elevation");}
  if (datatype_id == 86) {strcpy(datatype_name,"plant capacity");}
  if (datatype_id == 86) {strcpy(datatype_name,"reservoir area");}

/*End of datatype naming*/

  EXEC SQL SELECT UNIT_NAME
    INTO :unit_name:value_null_indicator
      FROM HDB_DATATYPE A, HDB_UNIT B
	WHERE DATATYPE_ID = :datatype_id
	  AND A.UNIT_ID = B.UNIT_ID;
    if ((sqlca.sqlcode > 0) || (value_null_indicator == -1))
    {		
      printf("Error retrieving unit name for datatype id %d\n",datatype_id);
      exit(4);
    }  

  printf("\n       %s\n\n",site_name);
/* printf("\n         %s\n\n",datatype_name);
  printf("\n         %s\n\n",unit_name);*/

  printf("       Date            %s\n",datatype_name);
  printf("                       %s\n",unit_name);
  
    
  EXEC SQL COMMIT;

  EXEC SQL DECLARE BASE CURSOR FOR
    SELECT DISTINCT START_DATE_TIME
      FROM R_DAY 
	WHERE START_DATE_TIME BETWEEN to_date(:firstday, 'dd-mon-yyyy hh24:mi:ss') AND to_date(:thisday, 'dd-mon-yyyy hh24:mi:ss');
  

  
  EXEC SQL DECLARE AA CURSOR FOR
    SELECT A.START_DATE_TIME, A.VALUE
      FROM R_DAY A, HDB_SITE_DATATYPE B
	WHERE B.SITE_ID = :site_id
	  AND B.DATATYPE_ID = :datatype_id
	    AND A.SITE_DATATYPE_ID = B.SITE_DATATYPE_ID
	      AND START_DATE_TIME BETWEEN to_date(:firstday, 'dd-mon-yyyy hh24:mi:ss') AND to_date(:thisday, 'dd-mon-yyyy hh24:mi:ss');
  
  
  EXEC SQL OPEN BASE;
  
  count_base = 0;
  while (sqlca.sqlcode <= 0)
    {
      EXEC SQL FETCH BASE
	INTO :dater_base:value_null_indicator;
      if(sqlca.sqlcode <= 0)
	{
          strcpy(date_out_base[count_base],dater_base);
          val_null_base[count_base]= value_null_indicator;
        }
      count_base = count_base +1;
    }

  EXEC SQL OPEN AA;

  count1 = 0;
  while (sqlca.sqlcode <= 0)
    {    
      EXEC SQL FETCH AA
	INTO :dater1,:value1:value_null_indicator;
      if(sqlca.sqlcode <= 0)
	{
	  strcpy(date_out1[count1],dater1);
	  vals1[count1] = value1; 
	  val_null1[count1]= value_null_indicator;
	}
      count1 = count1 + 1;
    }



/*NEW SECTION TO ALIGN THE VALUES AND TEST FOR ALL MISSING DATA*/

  for(i=0;i<count_base;i++)
    {
      final1[i] = 998877;
      test_a = strcmp(date_out_base[i],date_out1[i]);
      if((test_a == 0)) 
	{
	  final1[i] = vals1[i];
	}
      else
	{
	  for (j=0;j < count1-1;j++)
	    {
	      test_b = strcmp(date_out_base[i],date_out1[j]);
	     
	      if((test_b == 0))
		{
		  final1[i] = vals1[j];
		  j = count_base;
		}
	    }
	}
    }

  
  /*END OF THE NEW SECTION FOR CHECKING DATA*/  
  
  /*CONVERTS ALL 'FINAL ARRAYS' FROM FLOAT VALUES TO CHAR VALUES IN 'FINALC ARRAYS' AND FOR DATA 
    THAT = 998877 CONVERTS THESE FLOAT VALUES TO CHAR '---' THEN PRINTS OUT ALL THE CHAR DATA 
    FORMATTED IN A ROWS*/

  for(i=0; i < count_base-1; i++)
    {
      if(final1[i] == 998877) 
	{
	  sprintf(final1c[i],"    ---\0");
	}
      else
	{
	  sprintf(final1c[i],"%7.2f",final1[i]);
	}

      printf("       %s     %s  \n",date_out_base[i],final1c[i]);

    }
  
  printf("\n     All data is provisional and subject to review and modification\n\n");
  
  if ((result = SqlDisconnect ()) == ERROR)
    exit(ERROR);
  
  exit (0);
  
 errrpt:
  
  EXEC SQL WHENEVER SQLERROR CONTINUE;
  fprintf (stderr, "\n %.70s \n",sqlca.sqlerrm.sqlerrmc);
  if ((result = SqlDisconnect ()) == ERROR)
    exit (ERROR);
  exit (1); 
  
}









