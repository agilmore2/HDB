/*****************************************************************************
* DESCRIPTION
* These functions update the value(s) in the r_base table with the 
* values in the array snotelArray, for either percent snow 
* (SqlUpdateBasPctSnow), percent precip (SqlUpdateBasPctPrecip), 
* or current precip (SqlUpdateCurPrecip).  Additionally, the function
* SqlUpdateCurSnow updates values in r_base for current snow.
*
* If a record does not exist for the current site/datatype/date combination,
* then a new record is inserted.
*
* Currently, basins with an ID of 0 are NOT inserted; this is an
* invalid basin ID.
*
* ASSUMPTIONS 
* All of the data tables referenced exist.
*
* INPUT
* SNOTEL*        - snotel_data
* short          - number of elements in snotel_array
* short          - feature type for which data is being updated
*
* OUTPUT
* warnings and error messages
*
* RETURN
* RET_ERROR - values not successfully updated
* short - number of sites successfully updated
*
*
* COMMENTS
*
* AUTHOR - EDITORS
* Carol Marra
*
* NOTES
* April 2003 - Modified by Rick Casey to work with HDB2 schema.
*****************************************************************************/
#ifndef ORA_PROC
#include <stdlib.h>
#include <math.h>
#include "basins.h"
#include "dbutils.h"
#include "utils.h"
#endif
#include "defines.h"
#include "typedefs.h"
#include "basinTypedefs.h"

EXEC SQL INCLUDE sqlca;

#define FUNC_NAME "SqlUpdateCurSnow"

int SqlUpdateCurSnow (SNOTEL *snotelArray, int numSites, SQL_DATE date,
		      int *totalNumValues)
{
  EXEC SQL BEGIN DECLARE SECTION;
  ID            siteDatatypeId;
  float         curSnow;
  char          tempValidationFlag[2],
    method_name[64];
  varchar       validationFlag[2];
  SQL_DATE      sqlDate,
    start_date_time,
    end_date_time;
  int 			 loading_application_id,
    agen_id,
    collection_system_id,
    method_id,
    computation_id;
  EXEC SQL END DECLARE SECTION;
  
  int         rowCount,
    result;
  ID          siteId;
  
  /* Create the date variables. They are the same for all updates or inserts. */
  sprintf(sqlDate, date);
  EXEC SQL SELECT TO_CHAR(TRUNC(TO_DATE(:sqlDate,'dd-mon-yyyy hh24:mi:ss')),'dd-mon-yyyy hh24:mi:ss') INTO :start_date_time FROM dual;
  EXEC SQL SELECT TO_CHAR(TO_DATE(:start_date_time,'dd-mon-yyyy hh24:mi:ss')+1,'dd-mon-yyyy hh24:mi:ss') INTO :end_date_time FROM dual;
  
  (*totalNumValues) = 0;
  
  /* Fetch the foreign keys required for performing any inserts to r_base.  */
  if ( (result = SqlFetchRbasekeys(&loading_application_id, &agen_id, 
				   &collection_system_id, &computation_id) ) == ERROR)
    {
      return (ERROR);
    }
  /* Get the method id for the method for Current Snow . */
  strcpy(method_name,CUR_SNOW_METHOD_NAME);
  if ( (result = SqlGetMethodId(&method_name, &method_id) ) == ERROR)
    {
      return (ERROR);
    }
  
  
  /* loop through the snotelArray, updating all of the values for 
   * each site in snotelArray */
  for (rowCount = 0; rowCount < numSites; rowCount++)
    {
      siteId = snotelArray[rowCount].siteId;
      /* proceed only if siteId is valid */
      if (siteId)
	{
	  if ((result = SqlGetSiteDataTypeIdWithName (siteId, CUR_SNOW, &siteDatatypeId)) 
	      != CREATE_SDI)
	    {
	      if (result != OK) return (ERROR);
	      
	      if ((result = SqlGetValidationFlag (siteDatatypeId, 
						  tempValidationFlag)) == ERROR)
		return (ERROR);
	      
	      /* Write validationFlag to varchar host variable */
	      strcpy (validationFlag.arr, tempValidationFlag); 
	      validationFlag.len = strlen (validationFlag.arr);
	      validationFlag.arr[validationFlag.len] = '\0';
	      
	      /* Now update value for this site_datatype, date; if none exists,
	       * insert a new value */
	      curSnow = snotelArray[rowCount].currentSnow;
	      
	      if (curSnow != BAD_DATA)
		{
		  EXEC SQL EXECUTE
		    BEGIN
		    modify_r_base_raw (:siteDatatypeId, 'day',
				       :start_date_time, :end_date_time,
				       :curSnow, :agen_id, NULL, :validationFlag,
				       :collection_system_id, 
				       :loading_application_id, :method_id, 
				       :computation_id,
				       'Y');
		  END;
		  END-EXEC;
		  
		  if ((result = SqlErrorHandler 
		       (FUNC_NAME, FALSE,
			"Problem calling modify_r_base_raw for siteId: %d, curSnow.",
			siteId)) != OK)
		    {
		      EXEC SQL ROLLBACK;
		      return (ERROR);
		    }
		  
		  EXEC SQL COMMIT;
		  (*totalNumValues)++;
		  
		} /* if (curSnow != BAD_DATA) */
	      
	    } /* if ((result = SqlGetSiteDataTypeIdWithName (siteId, ...) */
	  else
	    {
	      /* If site_datatype is not known, continue */
	      PrintError ("***SDI unknown; continuing to process known site_datatypes.\n");
	    }
	  
	} /* if (siteId) */
      
    } /* for (rowCount = 0; rowCount < numSites; rowCount++) */
  return (OK);
}

/****************************************************************************
 * SqlUpdateCurPrecip
 ****************************************************************************/
#define FUNC_NAME "SqlUpdateCurPrecip"

int SqlUpdateCurPrecip (SNOTEL *snotelArray, int numSites, SQL_DATE date,
		      	int *totalNumValues)

{
 EXEC SQL BEGIN DECLARE SECTION;
   ID            siteDatatypeId;
   float         curPrecip;
   char          tempValidationFlag[2],
				 method_name[64];
   varchar       validationFlag[2];
   SQL_DATE      sqlDate, start_date_time, end_date_time;
	int 			 loading_application_id,
					 agen_id,
					 collection_system_id,
					 method_id,
					 computation_id;
 EXEC SQL END DECLARE SECTION;

 int         rowCount,
             result;
 ID          altId;

 /* Create the date variables. They are the same for all updates or inserts. */
 sprintf(sqlDate, date);
 EXEC SQL SELECT TO_CHAR(TRUNC(TO_DATE(:sqlDate,'dd-mon-yyyy hh24:mi:ss')),'dd-mon-yyyy hh24:mi:ss') INTO :start_date_time FROM dual;
 EXEC SQL SELECT TO_CHAR(TO_DATE(:start_date_time,'dd-mon-yyyy hh24:mi:ss')+1,'dd-mon-yyyy hh24:mi:ss') INTO :end_date_time FROM dual;
 (*totalNumValues) = 0;
 
 
 /* Fetch the foreign keys required for performing any inserts to r_base.  */
 if ( (result = SqlFetchRbasekeys(&loading_application_id, &agen_id, 
				  &collection_system_id, &computation_id) ) == ERROR)
   {
     return (ERROR);
   }
 
 /* Get the method id for the method for Current Precip. */
 strcpy(method_name,CUR_PCP_METHOD_NAME);
 if ( (result = SqlGetMethodId(&method_name, &method_id) ) == ERROR)
   {
     return (ERROR);
   }
 
 /* loop through the snotelArray, updating all of the values for 
    each site in snotelArray. Note that this is precip data, so the alternate 
    (climate site) ID is used. */
 for (rowCount = 0; rowCount < numSites; rowCount++)
   {
     altId = snotelArray[rowCount].altId;
     
     /* proceed only if altId is valid */
     if (altId)
       {
	 if ((result = SqlGetSiteDataTypeIdWithName (altId, CUR_PCP, 
						     &siteDatatypeId)) 
	     != CREATE_SDI)
	   {
	     if (result != OK)
	       return (ERROR);
	     
	     if ((result = SqlGetValidationFlag (siteDatatypeId, 
						 tempValidationFlag)) == ERROR)
	       return (ERROR);
	     
	     strcpy (validationFlag.arr, tempValidationFlag); 
	     validationFlag.len = strlen (validationFlag.arr);
	     validationFlag.arr[validationFlag.len] = '\0';
	     
	     /* Now update value for this site_datatype, date; if none exists,
		insert a new value */
	     curPrecip = snotelArray[rowCount].currentPrecip;
	     
	     if (curPrecip != BAD_DATA)
	       {
		 
		 EXEC SQL EXECUTE
		   BEGIN
		   modify_r_base_raw (:siteDatatypeId, 'day',
				      :start_date_time, :end_date_time,
				      :curPrecip, :agen_id, NULL, 
				      :validationFlag,
				      :collection_system_id, 
				      :loading_application_id, :method_id, 
				      :computation_id,
				      'Y');
		 END;
		 END-EXEC;
		 
		 if ((result = SqlErrorHandler 
		      (FUNC_NAME, FALSE,
		       "Problem calling modify_r_base_raw for siteId: %d, curPrecip.",
		       altId)) != OK)
		   {
		     EXEC SQL ROLLBACK;
		     return (ERROR);
		   }
		 
		 EXEC SQL COMMIT;
		 (*totalNumValues)++;
	       }
	   }
	 
	 /* If site_datatype is not known, continue */
	 else
	   {
	     PrintError ("***Continuing to process known site_datatypes.\n");
	   }
       }
   }
 return (OK);
}

/****************************************************************************/
#define FUNC_NAME "SqlUpdatePctSnow"

int SqlUpdatePctSnow (SNOTEL *snotelArray, int numSites, SQL_DATE date, 
		      int *totalNumValues)
     
{
  EXEC SQL BEGIN DECLARE SECTION;
  ID            siteDatatypeId;
  float         pctSnow;
   char          tempValidationFlag[2], method_name[64];
   varchar       validationFlag[2];
   SQL_DATE      sqlDate,
				 start_date_time, end_date_time;
	int 			 loading_application_id,
					 agen_id,
					 collection_system_id,
					 method_id,
					 computation_id;

 EXEC SQL END DECLARE SECTION;

 int         rowCount,
             result;
 ID          siteId;

 /* Create the date variables. They are the same for all updates or inserts. */
 sprintf(sqlDate, date);
 EXEC SQL SELECT TO_CHAR(TRUNC(TO_DATE(:sqlDate,'dd-mon-yyyy hh24:mi:ss')),'dd-mon-yyyy hh24:mi:ss') INTO :start_date_time FROM dual;
 EXEC SQL SELECT TO_CHAR(TO_DATE(:start_date_time,'dd-mon-yyyy hh24:mi:ss')+1,'dd-mon-yyyy hh24:mi:ss') INTO :end_date_time FROM dual;
 (*totalNumValues) = 0;
 
 
 /* Fetch the foreign keys required for performing any inserts to r_base.  */
 if ( (result = SqlFetchRbasekeys(&loading_application_id, &agen_id, 
				  &collection_system_id, &computation_id) ) == ERROR)
   {
     return (ERROR);
   }
 
 /* Get the method id for the method for Percent Snow. */
 strcpy(method_name,PCT_SNOW_METHOD_NAME);
 if ( (result = SqlGetMethodId(&method_name, &method_id) ) == ERROR)
   {
     return (ERROR);
   }
 
 /* loop through the snotelArray, updating all of the values for 
    each site in snotelArray */
 for (rowCount = 0; rowCount < numSites; rowCount++)
   {
     siteId = snotelArray[rowCount].siteId;
     
     /* proceed only if siteId is valid */
     if (siteId)
       {
	 if ((result = SqlGetSiteDataTypeIdWithName (siteId, PCT_SNOW, 
						     &siteDatatypeId)) 
	     != CREATE_SDI)
	   {
	     if (result != OK)
	       return (ERROR);
	     
	     if ((result = SqlGetValidationFlag (siteDatatypeId, 
						 tempValidationFlag)) == ERROR)
	       return (ERROR);
	     
	     strcpy (validationFlag.arr, tempValidationFlag); 
	     validationFlag.len = strlen (validationFlag.arr);
	     validationFlag.arr[validationFlag.len] = '\0';
	     
	     /* Now update value for this site_datatype, date; if none exists,
		insert a new value */
	     pctSnow = snotelArray[rowCount].percentSnow;
	     
	     if (pctSnow != BAD_DATA)
	       {
		 EXEC SQL EXECUTE
		   BEGIN
		   modify_r_base_raw (:siteDatatypeId, 'day',
				      :start_date_time, :end_date_time, 
				      :pctSnow, :agen_id, NULL, :validationFlag,
				      :collection_system_id, 
				      :loading_application_id, :method_id, 
				      :computation_id,
				      'Y');
		 END;
		 END-EXEC;
		 
		 if ((result = SqlErrorHandler 
		      (FUNC_NAME, FALSE,
		       "Problem calling modify_r_base_raw for siteId: %d, pctSnow.",
		       siteId)) != OK)
		   {
		     EXEC SQL ROLLBACK;
		     return (ERROR);
		   }
		 
		 EXEC SQL COMMIT;
		 (*totalNumValues)++;
	       }
	   }
	 
	 /* If site_datatype is not known, continue */
	 else
	   {
	     PrintError ("***Continuing to process known site_datatypes.\n");
	   }
       }
   }
 return (OK);
}

/****************************************************************************/
#define FUNC_NAME "SqlUpdatePctPrecip"

int SqlUpdatePctPrecip (SNOTEL *snotelArray, int numSites, SQL_DATE date, 
		      	int *totalNumValues)
     
{
  EXEC SQL BEGIN DECLARE SECTION;
  ID            siteDatatypeId;
  float         pctPrecip;
  char          tempValidationFlag[2], method_name[64];
  varchar       validationFlag[2];
  SQL_DATE      sqlDate, start_date_time, end_date_time;
  int 			 loading_application_id,
    agen_id,
    collection_system_id,
    method_id,
    computation_id;
  EXEC SQL END DECLARE SECTION;
  
  int         rowCount,
    result;
  ID          altId;
  
  /* Create the date variables. They are the same for all updates or inserts. */
  sprintf(sqlDate, date);
  EXEC SQL SELECT TO_CHAR(TRUNC(TO_DATE(:sqlDate,'dd-mon-yyyy hh24:mi:ss')),'dd-mon-yyyy hh24:mi:ss') INTO :start_date_time FROM dual;
  EXEC SQL SELECT TO_CHAR(TO_DATE(:start_date_time,'dd-mon-yyyy hh24:mi:ss')+1,'dd-mon-yyyy hh24:mi:ss') INTO :end_date_time FROM dual;
  (*totalNumValues) = 0;
  
  
  /* Fetch the foreign keys required for performing any inserts to r_base.  */
  if ( (result = SqlFetchRbasekeys(&loading_application_id, &agen_id, 
				   &collection_system_id, &computation_id) ) == ERROR)
    {
      return (ERROR);
    }
  
  
  /* Get the method id for the method for Percent Precip. */
  strcpy(method_name,PCT_PCP_METHOD_NAME);
  if ( (result = SqlGetMethodId(&method_name, &method_id) ) == ERROR)
    {
      return (ERROR);
    }
  /* loop through the snotelArray, updating all of the values for 
     each site in snotelArray. Note that this is precip data, so the alternate 
     (climate site) ID is used. */
  for (rowCount = 0; rowCount < numSites; rowCount++)
    {
      altId = snotelArray[rowCount].altId;
      
      /* proceed only if altId is valid */
      if (altId)
	{
	  if ((result = SqlGetSiteDataTypeIdWithName (altId, PCT_PCP, 
						      &siteDatatypeId)) 
	      != CREATE_SDI)
	    {
	      if (result != OK)
		return (ERROR);
	      
	      if ((result = SqlGetValidationFlag (siteDatatypeId, 
						  tempValidationFlag)) == ERROR)
		return (ERROR);
	      
	      strcpy (validationFlag.arr, tempValidationFlag); 
	      validationFlag.len = strlen (validationFlag.arr);
	      validationFlag.arr[validationFlag.len] = '\0';
	      
	      /* Now update value for this site_datatype, date; if none exists,
		 insert a new value */
	      pctPrecip = snotelArray[rowCount].percentPrecip;
	      
	      if (pctPrecip != BAD_DATA)
		{
		  EXEC SQL EXECUTE
		    BEGIN
		    modify_r_base_raw (:siteDatatypeId, 'day',
				       :start_date_time, :end_date_time,
				       :pctPrecip, :agen_id, NULL, :validationFlag,
				       :collection_system_id, 
				       :loading_application_id, :method_id, 
				       :computation_id,
				       'Y');
		  END;
		  END-EXEC;
		  
		  if ((result = SqlErrorHandler 
		       (FUNC_NAME, FALSE,
			"Problem calling modify_r_base_raw for siteId: %d, pctPrecip.",
			altId)) != OK)
		    {
		      EXEC SQL ROLLBACK;
		      return (ERROR);
		    }
		  
		  
		  
		  EXEC SQL COMMIT;
		  (*totalNumValues)++;
		}
	    }
	  
	  /* If site_datatype is not known, continue */
	  else
	    {
	      PrintError ("***Continuing to process known site_datatypes.\n");
	    }
	}
    }
  return (OK);
}
